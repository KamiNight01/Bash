Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements. For the below examples, 
the first example is equivalent to the second command.

$ mkdir /var/log/{auth,syslog,dmesg}_log

Results in

$ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log

Activity: Using Brace-Expansion, create the following directories within the $HOME directory:

1123
1134
1145
1156

ANS ------

mkdir $HOME/{1123,1134,1145,1156}

_________________________________________________________________________________________________________________________________________________________

coding bash
As we learned, the following example would create five files with one command.

touch file1.txt file2.txt file3.txt passwd.txt shadow.txt

But, with Brace Expansion it can be shortened to the following.

touch file{1..3}.txt passwd.txt shadow.txt

Activity:

Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. 
Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

1.txt
2.txt
3.txt
4.txt
5.txt
6~.txt
7~.txt
8~.txt
9~.txt

ANS ------- touch $HOME/1123/{1..5}.txt $HOME/1123/{6..9}~.txt

________________________________________________________________________________________________________________________________________________________
Using the find command, list all files in $HOME/1123 that end in .txt.

Be aware that if you use Pattern Matching to locate the files you may have unintended results based on if you use quotes around the pattern or not. 
If you do not quote the pattern, the Bash shell interprets the pattern. If you quote the pattern, it is passed to the command for it to interpret.
You can have a properly functioning command, yet unintended output, based on which of these two gets to interpret the pattern.

find $HOME/1123/ -name *.txt


________________________________________________________________________________________________________________________________________________________
Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.


cp  $(find ~/1123/ -name \*.txt ! -name \*~.txt ) ~/CUT
find ~/1123/ -name \*.txt ! -name  "*~*" -exec cp {} $HOME/CUT/.


_________________________________________________________________________________________________________________________________________________________
Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number,
separated by newlines.

Tip: When using the man pages, it is better to focus your search then to visually scan 1000+ lines of text. Combining the output with the grep command,
possibly with its -A, -B, or -C options, can help drive context driven searches of those manual pages.

find /var/ -empty -printf "%i %f\n"


_________________________________________________________________________________________________________________________________________________________
Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen,
not the absolute path to the file, 
separating each filename with a newline. Ensure unneeded output is not visible.

Tip: The above inode is specific to this CTFd question and might not be in use on your Linux Opstation. Instead, 
you can test your command on your Linux OpStation against inode 999.

find -type f  /inode 4026532575
find / -inum 4026532575 -printf "%f\n" 2>/dev/null

________________________________________________________________________________________________________________________________________________________

Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
Write those to a text file called names in $HOME/CUT directory.
Omit the names filename from your output.

ls -l $HOME/CUT | cut -d '.' -s -f1- | cut -d: -f2 | cut  -d " " -f2 > ~/CUT/names

________________________________________________________________________________________________________________________________________________________
EXERCISES
1.Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them 
  uniquely by number of times they appear.
egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}' StoryHiddenIPs | sort | uniq -c | sort -nr



2. Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
   Only display those that use /bin/bash as their default shell.
   The input file is named $HOME/passwd and is located in the current directory.
   Output the results to a file called $HOME/SED/names.txt
 awk 'NR==5, NR==44 {print NR,$0}' $HOME/passwd | awk  -F: '($7 == "/bin/bash") {print $1,$7}' | awk 'BEGIN {FS=" "} {print $2}' > $HOME/SED/names.txt
 
 
 awk -F: '3 > 3 && $NF == "/bin/bash/" {print $1}' $HOME/passwd > $HOME/SED/names.txt
 
 
  awk on field 3 if it's greather then three go to the last field ($NF) and check to see if equal  /bin/bash/ then if it's true print out a output of $1 
  which is the username.


3. Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
   Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]
dmesg | egrep  'BIOS|CPU' | egrep -vi 'reserved|usable' | cut -d"]" -f2-



4.Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted 
  password: Password1234, with salt: bad4u
  Output of this command should go to the screen/standard output.
  You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.
A=$(openssl passwd -1 -salt bad4u Password1234)
awk -F: -v "awk_var=$A" 'BEGIN {OFS=":"} {$2=awk_var} {print}' $HOME/PASS/shadow.txt  <------ awk -F: -v "awk_var=$A" makes A from outside of the 
                                                                                              awk command a local awk variable to use in the command.
                                                                                              It does this because awk can only use variables established
                                                                                              within itself.


5. Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.
   sed '/\/bin\/false/d;/\/bin\/sh/d' $HOME/passwd > $HOME/PASS/passwd.txt
  sed -e '/\/bin/sh/d' -e /\/bin/false/d' $HOME/passwd > $HOME/PASS/passwd.txt
  
  _____________________________________________________________________________________________________________________________________________________
  

  -------------ACTIVITY ------------------
  
  
1. Using find, find all files under the $HOME directory with a .bin extension ONLY.
Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
Ensure there is no trailing / at the end of the directory path when outputting to standard output.
You may need to sort the output depending on the command(s) you use.
Tip: For stripping the filename out of the output, there are different ways that this can be accomplished based on what you have learned so far.

Utilizing -printf options on find.
Utilizing awk to manipulate the fields. This may leave the trailing / if you don't take that into account.
Utilizing the rev and cut commands creatively.




find $HOME -type f -name "*.bin" | rev | cut -d/ -f2- | rev | sort -u

find $HOME -iname  "*.bin" -printf "%s %h\n" |sort -u

find / -type f -iname "*.bin" | awk 'BEGIN{FS=OSF="/"}{NF=NF-1; print $0}

_______________________________________________________________________________________________________________________________________________________

2. Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
Modify the copied line to change:
User name to the value specified by $2 positional parameter
Used id and group id to the value specified by $3 positional parameter
Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory
The default shell to `/bin/bash'
Append the modified line to the end of the file
Tip: awk provides the simplest method for completing this activity. Refer back to your notes on "09 - BASH Activity" 
if you are in need of starting point on this activity.

Note: The contents of the passwd-like file will be randomly generated on each submission. 
It is intended to read the last line once and store it in a variable.


tail -1 $1 | awk -F: -v "name=$2" -v "id=$3" 'BEGIN {OFS=":"} {$1=name} {$3=id} {$4=id} {$6="/home/"name} {$7="/bin/bash"} {print}' >> $1

name = $2
ugid = $3
file = $1
cmd=$(tail -1 $file)
echo $cmd |awk -F: -v "awkname=$name" -v "awkguid=$guid" 'BEGIN{OSF=":"} 
{$1=awkname} {$3=awkguid} {$4=awkguid} {$6="/home/"awkname}
{$NF="/bin/bash"} {print $0}' >> $file

____________________________________________________________________________________________________________________________________________________

3. Find all executable files under the following four directories:
/bin
/sbin
/usr/bin
/usr/sbin
Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.
Tip: In the below example, you can see the different uses of md5sum. 
While not wrong, the first command is hashing the string output of the the find command. 
In the second, md5sum is hashing the file contents of the given file, which is what is intended for this activity. 
You can also tell the second method hashed the file as the file name is listed in the hash output; the first only lists a hyphen indicating a 
string was hashed. For this activity, to provide md5sum with the 10th file of the sorted output, it is recommended to use Command Subtitution.

[chris@localhost ~]$ find /etc -maxdepth 1 -name passwd | md5sum
9231fb35b4431d59eae53a8c0d673231  -
[chris@localhost ~]$ md5sum /etc/passwd
62f5fa5100adcee3305cf979b5734a3e  /etc/passwd


md5sum $(find /bin  /sbin /usr/bin /usr/sbin -type f -executable | sort |head -10 | tail -1  ) | cut -d/ -f1

_____________________________________________________________________________________________________________________________________________________

Using any BASH command complete the following:

4>Sort the /etc/passwd file numerically by the GID field.
For the 10th entry in the sorted passwd file, get an md5 hash of that entry’s home directory.
Output ONLY the MD5 hash of the directory's name to standard output.
Note: Since we are dealing with a directory, which is both a string and an absolute path, it matters how we get the md5sum of our intended output.

[chris@localhost ~]$ md5sum /home/chris
md5sum: /home/chris: Is a directory
In the above example, an error is returned because we are applying the directory /home/chris as the first argument of the above command. 
Since /home/chris is a directory, likely with additional files within it, we cannot assign this as an argument. However,
we have the string /home/chris as STDIN for a command, as seen in the below example.
[chris@localhost ~]$ echo "/home/chris" | md5sum
fd1a05901ce7150f82abd7f7d76f2827  -


sort -t: -k4n /etc/passwd |awk 'NR==10 {print}' |cut -d: -f6| md5sum |cut -d'-' -f1


_________________________________________________________________________________________________________________________________________________________

5.Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
Your script should:
Exclude named pipes. These can break your script.
Redirect STDOUT and STDERR to separate files.
Determine the count of files hashed in the file with hashes.
Determine the count of unsuccessfully hashed directories.
Have both counts output to the screen with an appropriate title for each count.
Example Output:

Successfully Hashed Files: 105
Unsuccessfully Hashed Directories: 23


#!/bin/bash 

md5sum $(find /bin /etc /var -maxdepth 3) >output.txt 2>errfile.txt
A=$(wc -l < output.txt)
grep "directory" errfile.txt > dirfile.txt
B=$(wc -l < dirfile.txt)


echo "Successfully Hashed Files: $A"
echo "Unsuccessfully Hashed Directories: $B"

_________________________________________________________________________________________________________________________________________________________

Upon successful detection, copies any and all files from within the directory $HOME/.ssh to directory $HOME/SSH and produce no output. You will need to create $HOME/SSH.
Upon un-successful detection, displays the error message "Run ssh-keygen" to the user.
NOTE: If the $HOME/.ssh directory does not exist, one may run the ssh-keygen command. Accept all defaults for the purposes of this exercise. This is not necessary for passing the activity but can be used for testing on your local machine.

#!/bin/bash
if [[ -d $HOME/.ssh ]]; then
    mkdir $HOME/SSH
    cp -R $HOME/.ssh/* $HOME/SSH > /dev/null
else
    echo "Run ssh-keygen"
fi


Write a script that determines your default gateway ip address. Assign that address to a variable using command substitution.
NOTE: Networking on the CTFd is limited for security reasons. ip route and route are emulated. Use either of those with no switches.
Have your script determine the absolute path of the ping application. Assign the absolute path to a variable using command substitution.
Have your script send six ping packets to your default gateway, utilizing the path discovered in the previous step, and assign the response to a variable using command substitution.
Evaluate the response as being either successful or failure, and print an appropriate message to the screen.
Pseudo Example:

A=$(command_1)
B=$(command_2)
C=$($A command_3 $B)
if [[ "$" <condition> "$" ]]; then
   echo "successful";
else
   echo "failure";
fi 





#!/bin/bash

A=$( ip route | cut -d' ' -f3 |head -1 )
B=$(which ping)
C=$( $B -c 6 $A)
D=$( echo $C |grep -o "6 received")
if [[ "$D" == "6 received" ]]; then
   echo "successful";
else
   echo "failure";
fi





#!/bin/bash

A=$(ip route | grep 'default.*[[:digit:]]' | awk '{print $2}')
B=$(which ping)
C= " 0% packet loss"
echo $A \n $B \n $C
D=$($B -c 6 $A | grep -Eo "$C")
echo $D

_______________________________________________________________________________________________________________________
Create the following files in a new directory you create $HOME/ZIP:
file1 will contain the md5sum of the text 12345
file2 will contain the md5sum of the text 6789
file3 will contain the md5sum of the text abcdef
Create a zip file containing the three files above, without being stored inside a directory in the zip file. Name the zip file $HOME/ZIP/file.zip
HINT: "Junk" the paths
Utilize tar on $HOME/ZIP/file.zip to archive it into a file called $HOME/ZIP/file.tar.gz which should not include directories. Use the gzip option in tar, DO NOT use a seperate gzip binary.
HINT: You might need an option to change directories first.


mkdir $HOME/ZIP
echo "12345" |md5sum | cut -d" " -f1 > ~/ZIP/file1
echo "6789" |md5sum | cut -d" " -f1 > ~/ZIP/file2
echo "abcdef" |md5sum | cut -d" " -f1 >  ~/ZIP/file3
cd $HOME/ZIP
zip file.zip file1 file2 file3
tar -czf file.tar.gz file.zip


 curl cht.sh /tar


mkdir $HOME/ZIP
echo "12345" |md5sum | cut -d" " -f1 > ~/ZIP/file1
echo "6789" |md5sum | cut -d" " -f1 > ~/ZIP/file2
echo "abcdef" |md5sum | cut -d" " -f1 >  ~/ZIP/file3
zip -j $HOME/ZIPfile.zip $HOME/ZIP/file{1,2,3}
tar -czf $HOME?ZIP/file.tar.gz -C $HOME/ZIP/file/zip


________________________________________________________________________________________________________________________________________________


19.Design a basic FOR Loop that iteratively alters the file system and user entries in a passwd-like file for new users: LARRY, CURLY, and MOE.
Each user should have an entry in the $HOME/passwd file
The userid and groupid will be the same and can be found as the sole contents of a file with the user's name in the $HOME directory (i.e. $HOME/LARRY.txt might contain 123)
The home directory will be a directory with the user's name located under the $HOME directory (i.e. $HOME/LARRY)
NOTE: Do NOT use shell expansion when specifying this in the $HOME/passwd file.
The default shell will be /bin/bash
The other fields in the new entries should match root's entry
Users should be created in the order specified



for value in 'LARRY' 'CURLY' 'MOE'
do
mkdir $HOME/$value
echo $value:x:$(cat $HOME/$value.txt):$( cat $HOME/$value.txt):root:'$HOME'/$value:/bin/bash >> $HOME/passwd
done


rootline=$( heac -1 $HOME/passwd
for x in {LARRY,CURLY,MOE} ; do
        myuid=(cat $HOME/$x.txt)
        mkdir  $home/$x
        echo $rootline | awk -F: -v uu=$x -v ii=$xmyuid 'BEGIN{OFS=":"}{$1=uu;$3=ii;$4=ii;$6="$HOME/$uu}{print $0}' >> $HOME/passwd  
        # creating a line then using awk to set the 3
        #different variablest that are declared and need to be changed then started with 
        #begin then set the OFS so that you can begin settin the new id's then appending it back onto $HOME/passwd 
        done

_______________________________________________________________________________________________________________________________________________________
 20.Write a bash script that will find all the files in the /etc directory, and obtains the octal permission of those files. The stat command will be useful for this task.
Depending how you go about your script, you may find writing to the local directory useful. What you must seperate out from the initial results are the octal permissions of 0-640 and those equal to and greater than 642, ie 0-640 goes to low.txt, while 642 is sent to high.txt.
Have your script uniquely sort the contents of the two files by count, numerically-reversed, and output the results, with applicable titles, to the screen. An example of the desired output is shown below.
NOTE: There is a blank line being printed between the two sections of the output below.
EXAMPLE OUTPUT:

Files w/ OCTAL Perm Values 642+:
    424 777
    365 644
     15 755
  
Files w/ OCTAL Perm Values 0-640:
      4 640
      3 440
      2 600
      1 444

----
#!/bin/bash
find /etc -type f -exec stat -c '%a' {} \; > ./A 2>/dev/null
for x in $(cat ./A) ; do
        if [[ $x -le 640 ]]; then
          echo $x >> ./less2
        elif [[ $x -ge 642 ]]; then
          echo $x >> ./more2
        fi
done
echo 'Files w/ OCTAL Perm Values 642+:'
cat ./more2 |sort |uniq -c |sort -nr
echo
echo 'Files w/ OCTAL Perm Values 0-640:'
cat ./less2 |sort |uniq -c |sort -nr


