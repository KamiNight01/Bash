Brace expansion is a mechanism by which arbitrary strings may be generated, for commands that will take multiple arguements. For the below examples, 
the first example is equivalent to the second command.

$ mkdir /var/log/{auth,syslog,dmesg}_log

Results in

$ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log

Activity: Using Brace-Expansion, create the following directories within the $HOME directory:

1123
1134
1145
1156

ANS ------

mkdir $HOME/{1123,1134,1145,1156}

_________________________________________________________________________________________________________________________________________________________

coding bash
As we learned, the following example would create five files with one command.

touch file1.txt file2.txt file3.txt passwd.txt shadow.txt

But, with Brace Expansion it can be shortened to the following.

touch file{1..3}.txt passwd.txt shadow.txt

Activity:

Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. 
Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

1.txt
2.txt
3.txt
4.txt
5.txt
6~.txt
7~.txt
8~.txt
9~.txt

ANS ------- touch $HOME/1123/{1..5}.txt $HOME/1123/{6..9}~.txt

________________________________________________________________________________________________________________________________________________________
Using the find command, list all files in $HOME/1123 that end in .txt.

Be aware that if you use Pattern Matching to locate the files you may have unintended results based on if you use quotes around the pattern or not. 
If you do not quote the pattern, the Bash shell interprets the pattern. If you quote the pattern, it is passed to the command for it to interpret.
You can have a properly functioning command, yet unintended output, based on which of these two gets to interpret the pattern.

find $HOME/1123/ -name *.txt


________________________________________________________________________________________________________________________________________________________
Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.


cp  $(find ~/1123/ -name \*.txt ! -name \*~.txt ) ~/CUT
find ~/1123/ -name \*.txt ! -name  "*~*" -exec cp {} $HOME/CUT/.


_________________________________________________________________________________________________________________________________________________________
Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number,
separated by newlines.

Tip: When using the man pages, it is better to focus your search then to visually scan 1000+ lines of text. Combining the output with the grep command,
possibly with its -A, -B, or -C options, can help drive context driven searches of those manual pages.

find /var/ -empty -printf "%i %f\n"


_________________________________________________________________________________________________________________________________________________________
Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen,
not the absolute path to the file, 
separating each filename with a newline. Ensure unneeded output is not visible.

Tip: The above inode is specific to this CTFd question and might not be in use on your Linux Opstation. Instead, 
you can test your command on your Linux OpStation against inode 999.

find -type f  /inode 4026532575
find / -inum 4026532575 -printf "%f\n" 2>/dev/null

________________________________________________________________________________________________________________________________________________________

Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
Write those to a text file called names in $HOME/CUT directory.
Omit the names filename from your output.

ls -l $HOME/CUT | cut -d '.' -s -f1- | cut -d: -f2 | cut  -d " " -f2 > ~/CUT/names


